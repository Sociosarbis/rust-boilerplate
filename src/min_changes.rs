use super::Solution;

impl Solution {
  pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {
    // 以K位为一个周期，每个周期中相同的位置数值相同 nums[i] == nums[i + k]
    // dp[index][xor]使所有周期 [0, index]位置的数进行异或运算后得到的值为xor所需的改动数
    let mut dp = vec![vec![nums.len() as i32;1 << 10];k as usize];
    // 上一个位置（index）的最小改动数
    let mut prev_min_step = nums.len() as i32;
    for i in 0..k as usize {
      // 在遍历各周期同一位置时，对数值计数
      let mut counter = vec![0;1 << 10];
      // 周期数
      let mut size = 0;
      for j in (i..nums.len() as usize).step_by(k as usize) {
        counter[nums[j] as usize] += 1;
        size += 1;
      }

      
      if i == 0 {
        for k in 0..1 << 10 {
          // 在第一步，相当于将nums[i] 直接改为k，那么自然就得出下面的等式
          dp[i][k] = size - counter[k];
          if dp[i][k] < prev_min_step {
            prev_min_step = dp[i][k];
          }
        }
      } else {
        let mut next_prev_min_step = nums.len() as i32;
        for l in 0..1 << 10 {
          // 较大的可能情况为，当前位置的数值全部更改为异或上一个位置的最小改动数对应的xor值的结果
          // 因此在初始的时候，可以粗略地将上一个位置的最小改动数加上当前的size作为初始的改动数
          dp[i][l] = prev_min_step + size;
          // 下面遍历不是全部更改的情况
          for j in (i..nums.len() as usize).step_by(k as usize) {
            let prev_step = dp[i - 1][l ^ nums[j] as usize];
            let res = size - counter[nums[j] as usize] + prev_step;
            if res < dp[i][l] {
              dp[i][l] = res;
            }
          }
          if dp[i][l] < next_prev_min_step {
            next_prev_min_step = dp[i][l];
          }
        
        }
        prev_min_step = next_prev_min_step;
      }
    }
    dp[k as usize - 1][0]
  }
}


#[cfg(test)]
mod tests {
  use super::*;

  struct Suite {
    nums: Vec<i32>,
    k: i32,
    ret: i32
  }

  #[test]
  fn test_min_changes_simple() {
    let suites = vec![
      Suite {
        nums: vec![1,2,0,3,0],
        k: 1,
        ret: 3
      },
      Suite {
        nums: vec![3,4,5,2,1,7,3,4,7],
        k: 3,
        ret: 3
      },
      Suite {
        nums: vec![1,2,4,1,2,5,1,2,6],
        k: 3,
        ret: 3
      },
      Suite {
        nums: vec![26,19,19,28,13,14,6,25,28,19,0,15,25,11],
        k: 3,
        ret: 11
      },
      Suite {
        nums: vec![406,39,440,816,167,943,530,245,1008,703,58,707,583,804,746,720,444,793,87,375,655,688,581,145,226,1,434,171,21,753,379,388,320,360,119,642,73,720,255,39,740,737,618,104,238,161,478,15,276,402,589,448,857,705,708,672,148,355,332,958,449,663,469,714,320,983,491,84,291,744,719,295,656,488,6,286,715,202,604,498,91,102,561,672,771,147,1000,990,553,649,369,860,906,536,578,331,484,31,706,100,85,820,766,926,6,983,156,446,343,782,844,293,66,687,90,601,508,385,256,721,774,238,377,519,28,467,16,711,176,873,572,100,114,934,675,639,491,361,514,423,463,178,669,1003,684,746,372,760,199,635,371,849,378,443,406,998,71,712,758,848,395,449,572,414,406,566,198,109,596,465,617,713,600,940,487,443,799,922,185,729,452,81,874,552,8,382,119,304,796,1,370,407,849,968,289,449,741,730,824,967,719,719,599,250,784,57,597,663,157,861,864,776,870,49,735,293,809,404,411,416,915,430,399,796,602,637,886,940,92,763,459,905,698,529,707,373,664,156,271,831,951,260,724,418,504,453,715,969,813,285,1005,868,954,941,738,5,49,565,119,439,697,175,691,624,243,699,849,144,321,712,776,181,672,93,245,619,813,332,822,356,581,613,113,276,826,851,137,792,63,227,425,886,5,131,605,784,989,451,99,98,735,304,329,351,205,470,250,594,141,473,105,202,575,812,749,201,310,747,618,656,883,69,934,429,106,441,541,799,511,1001,133,497,0,773,62,382,71,765,993,634,161,981,475,132,632,602,74,302,556,833,35,228,886,609,196,612,108,110,600,920,267,900,998,639,522,504,135,591,411,619,971,704,526,143,36,622,426,992,55,538,828,524,325,680,196,739,806,1007,270,739,215,57,612,998,598,888,851,735,950,850,538,853,99,504,620,1015,713,758,853,913,1010,236,96,29,591,463,14,449,990,276,242,718,263,972,276,418,600,604,882,762,633,327,95,896,128,343,448,352,335,212,370,866,16,395,991,332,454,464,948,658,184,891,75,367,679,91,354,138,988,198,938,880,570,245,505,361,435,16,217,612,13,679,708,546,18,368,155,528,895,967,190,60,207,939,461,396,961,572,893,1010,388,162,382,625,740,846,339,385,911,815,428,692,698,47,115,394,144,617,837,572,993,244,962,891,80,577,84,18,1,205,155,917,87,914,48,282,659,230,669,940,574,261,366,263,390,351,1016,150,829,120,711,665,109,343,416,745,109,878,223,935,33,121,679,1019,447,617,1012,248,285,316,612,101,669,481,545,127,190,801,810,311,485,488,425,409,374,561,528,165,957,597,1004,365,214,923,732,80,258,84,352,754,834,514,536,103,876,851,257,66,510,397,47,595,946,594,846,105,849,896,124,126,821,504,306,193,571,870,533,322,640,824,756,187,483,450,265,180,377,1008,296,766,214,1019,896,689,919,225,164,897,137,855,897,577,931,983,559,229,387,144,700,189,134,909,721,920,13,245,434,900,541,206,911,778,230,545,659,802,656,875,902,733,108,202,978,767,95,602,885,844,991,417,149,714,3,691,950,363,237,899,943,520,367,391,245,683,186,602,149,934,257,605,277,405,458,786,1019,400,337,365,27,324,130,199,267,211,514,989,483,83,849,320,221,364,799,908,63,497,856,457,162,701,846,97,408,535,915,524,229,361,694,169,36,874,120,259,55,200,373,263,78,533,277,1020,613,824,724,158,579,297,885,598,806,437,919,964,418,742,479,74,666,525,620,85,433,634,115,56,194,379,672,219,611,850,41,325,901,913,566,739,263,1008,592,286,634,42,498,715,23,481,316,239,540,402,705,188,345,391,791,828,435,89,115,606,574,171,92,313,585,324,263,751,759,639,466,718,187,815,99,276,474,466,288,367,1004,1006,604,349,29,52,910,74,152,973,651,856,327,1019,479,1017,188,245,108,453,489,400,325,953,491,743,337,786,380,177,216,119,152,137,1004,827,67,438,93,198,486,589,349,313,712,316,873,468,280,868,524,546,52],
        k: 246,
        ret: 638
      }
    ];

    for s in suites {
      assert_eq!(Solution::min_changes(s.nums, s.k), s.ret);
    }
  }

}